#+TITLE: Angad Singh's Emacs Config
#+AUTHOR: Angad Singh
#+OPTIONS: TOC:NIL

* About
  I'm Angad Singh, a high school student from New Delhi, India. I mostly use Emacs for writing code and taking notes with =org-mode=. I'm a member of [[http://dpsrkp.net][Delhi Public School, R.K. Puram's]] computer club, [[http://exunclan.com][Exun Clan]] where I work with the quizzing and web development departments. This mostly involves PHP on the backend and a lot of frontend JavaScript. I also write a lot of JavaScript on the backend with frameworks like Express and Koa. I like to hack around with stuff that I might get to work with in the future, this includes languages like Python and Go. This config is highly inspired by Mike Zamansky's [[http://cestlaz.github.io/stories/emacs/][Using Emacs]] series. I've tried to read documentation for and understand everything in this file, in case you see my elisp-fu falter feel free to submit an issue on this repo and tell me about it.

* Installation
  1. Make sure you have emacs installed.
     Install on MacOS - 
     #+BEGIN_SRC sh
       # Uninstall any previous versions
       brew uninstall emacs
       # Check if your homebrew is okay
       brew cleanup
       brew doctor
       # Update and upgrade everything
       brew update
       brew upgrade
       # Install emacs-plus
       brew tap d12frosted/emacs-plus
       brew install emacs-plus --with-mailutils --with-modern-icon
       # Or if you prefer regular emacs
       brew install emacs --with-cocoa --with-librsvg --with-imagemagick@6
     #+END_SRC

     Install on Debain-based distros - 
     #+BEGIN_SRC sh
       sudo apt install emacs
     #+END_SRC

  2. Clone this repo
     #+BEGIN_SRC sh
       mv ~/.emacs.d ~/.emacs.d.bak
       git clone https://github.com/dotangad/dotemacs.git ~/.emacs.d
     #+END_SRC

  3. And you're done!

* Set user details
  Set =user-full-name= and =user-mail-address=.
  #+BEGIN_SRC emacs-lisp
    (setq user-full-name "Angad Singh")
    (setq user-mail-address "mail@angad.dev")
  #+END_SRC

* Package management
  I use Emacs' =package.el= and =use-package= to install and configure packages.
** Setup =package.el=
   I like to activate packages after Emacs is done reading the init file because it might mess up the package's config.
   #+BEGIN_SRC emacs-lisp
     (require 'package)
     (setq package-enable-at-startup nil)
   #+END_SRC

** Add repositories
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'package-archives
                  '("melpa" . "https://melpa.org/packages/"))
     (add-to-list 'package-archives
                  '("gnu" . "https://elpa.gnu.org/packages/"))
     (add-to-list 'package-archives
                  '("org" . "http://orgmode.org/elpa/"))
   #+END_SRC

** Initialize
   #+BEGIN_SRC emacs-lisp
     (package-initialize)
   #+END_SRC

** Bootstrap use-package
   [[https://github.com/jwiegley/use-package][use-package]] is a nicer way to install and configure packages.
   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'use-package)
             (package-refresh-contents)
             (package-install 'use-package))
   #+END_SRC

* Interface changes
  #+BEGIN_SRC emacs-lisp
    ;; Remove the startup message and change the message in the scratch buffer.
    (setq start-message ";; dotangad")
    (setq inhibit-startup-message t)
    (setq initial-scratch-message start-message)
    (setq inhibit-startup-echo-area-message start-message)

    ;; Use Emoji Font for Emojis
    (set-fontset-font t 'symbol 
                      (font-spec :family "Apple Color Emoji") 
                      nil 'prepend)

    ;; Replace list-buffers with ibuffer
    (defalias 'list-buffers 'ibuffer)

    ;; Line numbers
    (setq linum-format "%4d ")
    (add-hook 'prog-mode-hook (lambda () (linum-mode 1)))

    ;; Disable scrollbar and toolbar
    (scroll-bar-mode 0)
    (tool-bar-mode 0)

    ;; Use y-or-n instead of yes-or-no
    (fset 'yes-or-no-p 'y-or-n-p)

    ;; Show matching parens
    (show-paren-mode 1)

    ;; Automatically revert buffer on changes
    (global-auto-revert-mode t)

    ;; Record changes in the window configuration
    (winner-mode 1)

    ;; Tell emacs to use visual-lines
    (global-visual-line-mode 1)

    ;; Tabs are evil
    (setq-default indent-tabs-mode 0)
    (setq-default tab-width 2)
    (setq c-basic-offset 2)
    (setq cperl-indent-level 2)
    (setq js2-basic-offset 2)
    (setq css-indent-offset 2)
    (setq sh-basic-offset 2)

    ;; Backup files: don't create them
    (setq make-backup-files nil)
    (setq auto-save-default nil)
  #+END_SRC

* Miscellaneous packages
** try
   Try packages before installing them.
   #+BEGIN_SRC emacs-lisp
     (use-package try
       :ensure t)
   #+END_SRC
** simpleclip
   Keep system clipboard and emacs kill ring separate.
   #+BEGIN_SRC emacs-lisp
     (use-package simpleclip
       :ensure t
       :config
       (simpleclip-mode))
   #+END_SRC

** dimmer
   Dim inactive windows
   #+BEGIN_SRC emacs-lisp
     (use-package dimmer
       :ensure t
       :config
       (setq dimmer-fraction 0.2)
       (setq dimmer-exclusion-regexp "^\*helm.*\\|^ \*Minibuf-.*\\|^ \*Echo.*")
       (dimmer-mode))
   #+END_SRC

** which-key
   Bring up help on key combinations.
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :ensure t
       :config (which-key-mode))
   #+END_SRC

** ace-window
   Switch windows faster
   #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :ensure t
       :bind ("C-x C-a" . ace-window))
   #+END_SRC

** expand-region
   Great way to mark text. I usually bind it to C-=.
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :ensure t
       :config (global-set-key (kbd "C-=") 'er/expand-region))
   #+END_SRC

** undo-tree
   Show a tree of your undos.
   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :ensure t
       :config (global-undo-tree-mode))
   #+END_SRC

** iedit
   Edit multiple things at once.
   #+BEGIN_SRC emacs-lisp
     (use-package iedit
       :ensure t)
   #+END_SRC

** smartparens
   Deal with delimiters better.
   #+BEGIN_SRC emacs-lisp
     (use-package smartparens
       :ensure t
       :config
       (require 'smartparens-config)
       (add-hook 'prog-mode-hook (lambda () (smartparens-mode))))
   #+END_SRC

** hl-todo
   Highlight TODO and similar keywords in comments and strings.
   #+BEGIN_SRC emacs-lisp
     (use-package hl-todo
       :ensure t
       :config
       (progn
         (global-set-key (kbd "C-c p") 'hl-todo-previous)
         (global-set-key (kbd "C-c n") 'hl-todo-next)
         (global-set-key (kbd "C-c o") 'hl-todo-occur)
         (add-hook 'prog-mode-hook hl-todo-mode)))
   #+END_SRC

* Flycheck
  On-the-fly syntax checking.
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :config
      (global-flycheck-mode))
  #+END_SRC
  Enable flyspell, on-the-fly spell checking.
  #+BEGIN_SRC emacs-lisp
    (setq ispell-program-name "/usr/local/bin/aspell")
    (add-hook 'text-mode-hook flyspell-mode)
  #+END_SRC

* Projectile
  Project management in Emacs.
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :ensure t
      :config
      (projectile-global-mode))
  #+END_SRC

* counsel, ivy and swiper
** ivy
   A completion framework for Emacs.
   #+BEGIN_SRC emacs-lisp
     (use-package ivy
       :ensure t
       :diminish (ivy-mode)
       :bind (("C-x b" . ivy-switch-buffer))
       :config
       (ivy-mode 1)
       (setq ivy-use-virtual-buffers t)
       (setq ivy-count-format "%d/%d ")
       (setq ivy-display-style 'fancy))
   #+END_SRC

** counsel
   A collection of Ivy-enhanced versions of common Emacs commands.
   #+BEGIN_SRC emacs-lisp
     (use-package counsel
       :ensure t
       :bind
       (("M-y" . counsel-yank-pop)
       :map ivy-minibuffer-map
       ("M-y" . ivy-next-line)))
   #+END_SRC

** swiper
   An Ivy-enhanced alternative to Isearch.
   #+BEGIN_SRC emacs-lisp
     (use-package swiper
       :ensure t
       :bind (("C-s" . swiper)
	      ("C-r" . swiper)
	      ("C-c C-r" . ivy-resume)
	      ("M-x" . counsel-M-x)
	      ("C-x C-g" . counsel-ag)
	      ("C-x C-f" . counsel-find-file))
       :config
       (progn
	 (ivy-mode 1)
	 (setq ivy-use-virtual-buffers t)
	 (setq ivy-display-style 'fancy)
	 (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)))
   #+END_SRC

* Magit
  The best git porcelain ever made. It's become a poster child for good interfaces.
  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t
      :bind
      ("C-x m" . magit)
      ("C-x p" . magit-push-to-remote))
  #+END_SRC

* Custom minor-modes
** =my/hidden-mode-line-mode=
   Minor mode to hide the modeline in the buffer.
   [[https://emacs-doctor.com/emacs-strip-tease.html][Here]] and [[http://bzg.fr/emacs-hide-mode-line.html][here]].
   #+BEGIN_SRC emacs-lisp
     (defvar-local my/hidden-mode-line-mode nil)
     (defvar-local hide-mode-line nil)
     (define-minor-mode my/hidden-mode-line-mode
       "Minor mode to hide the mode-line in the current buffer."
       :init-value nil
       :global nil
       :variable my/hidden-mode-line-mode
       :group 'editing-basics
       (if my/hidden-mode-line-mode
	   (setq hide-mode-line mode-line-format
		 mode-line-format nil)
	 (setq mode-line-format hide-mode-line
	       hide-mode-line nil))
       (force-mode-line-update)
       ;; Apparently force-mode-line-update is not always enough to
       ;; redisplay the mode-line
       (redraw-display)
       (when (and (called-interactively-p 'interactive)
		  my/hidden-mode-line-mode)
	 (run-with-idle-timer
	  0 nil 'message
	  (concat "Hidden Mode Line Mode enabled.  "
		  "Use M-x my/hidden-mode-line-mode to make the mode-line appear."))))
   #+END_SRC

** =my/big-fringe-mode=
   A small minor mode to use a big fringe.
   [[https://emacs-doctor.com/emacs-strip-tease.html][Here]].
   #+BEGIN_SRC emacs-lisp
     (defvar my/big-fringe-mode nil)
     (define-minor-mode my/big-fringe-mode
       "A small minor mode to use a big fringe."
       :init-value nil
       :global t
       :variable my/big-fringe-mode
       :group 'editing-basics
       (if (not my/big-fringe-mode)
           (set-fringe-style nil)
         (set-fringe-mode
          (/ (- (frame-pixel-width)
               	(* 100 (frame-char-width)))
             2))))
     ;; Activate with
     ;; (my/big-fringe-mode 1)
   #+END_SRC

* Aesthetics
** Titlebar
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
     (add-to-list 'default-frame-alist '(ns-appearance . dark))
     (setq frame-title-format "emacs@macbook")
   #+END_SRC

** Set Font
   #+BEGIN_SRC emacs-lisp
     (defun my/set-font ()
       "Set the font"
       (interactive)
       (add-to-list 'default-frame-alist '(font . "Ubuntu Mono derivative Powerline" ))
       (set-face-attribute 'default nil
                           :family "Ubuntu Mono derivative Powerline"
                           :height 160
                           :weight 'normal
                           :width 'normal))
     (my/set-font)
   #+END_SRC

** Theme
*** Themes I like
    + [[https://github.com/dawidof/emacs-monokai-theme][monokai-alt]]
    + [[https://github.com/jordonbiondo/ample-theme][ample]]
    + [[https://github.com/dakrone/dakrone-theme][dakrone]]
    + [[https://github.com/startling/firebelly][firebelly]]
    #+BEGIN_SRC emacs-lisp
      (use-package cyberpunk-theme
        :ensure t
        :config
        (load-theme 'cyberpunk))
    #+END_SRC

** Modeline
*** smart-mode-line
   #+BEGIN_SRC emacs-lisp
     (use-package smart-mode-line
       :ensure t
       :config
       (setq sml/no-confirm-load-theme t)
       (setq sml/theme 'respectful)
       (sml/setup))
   #+END_SRC

** Fringe
   Change the color so that it doesn't look awkward.
   #+BEGIN_SRC emacs-lisp
     (defun my/fix-fringe ()
       (interactive)
       (if (display-graphic-p)
           (set-face-attribute 'fringe nil :background "black")))
     (my/fix-fringe)
   #+END_SRC

** Change cursor
   #+BEGIN_SRC emacs-lisp
     (setq-default cursor-type '(bar . 2))
     (blink-cursor-mode 0)
     (set-face-attribute 'cursor nil :background "#2977f5")
   #+END_SRC

* eshell
** Bind a key to eshell
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "M-s e") 'eshell)
   #+END_SRC

** exec-path-from-shell
   Keep shell environment variables and emacs variables in sync.
   #+BEGIN_SRC emacs-lisp
     (use-package exec-path-from-shell
       :ensure t
       :init
       (exec-path-from-shell-initialize)
       (exec-path-from-shell-copy-env "GOPATH"))
   #+END_SRC

** Aliases
   #+BEGIN_SRC emacs-lisp
     (defalias 'ff 'find-file)
     (defalias 'ffo 'find-file-other-window)
   #+END_SRC

** Prompt
   #+BEGIN_SRC emacs-lisp
     (use-package eshell-git-prompt
       :ensure t
       :config (eshell-git-prompt-use-theme 'default))
   #+END_SRC

* Code completion
  I like to use company-mode over autocomplete.el for code completion.
  #+BEGIN_SRC emacs-lisp
    (use-package company
      :ensure t
      :config
      (add-hook 'after-init-hook 'global-company-mode)
      (setq company-idle-delay 0)
      (global-set-key (kbd "C-c /") 'company-files))
  #+END_SRC

* Python
** Set python3 as the default interpreter
   #+BEGIN_SRC emacs-lisp
   ;; Set python3 as the python shell interpreter and default python command.
   (setq py-python-command "python3")
   (setq python-shell-interpreter "python3")
   #+END_SRC

** company-jedi
   Jedi backend for =company-mode=.
   #+BEGIN_SRC emacs-lisp
     (use-package company-jedi
       :ensure t)
   #+END_SRC

** elpy
   Emacs Python Development Environment.
   #+BEGIN_SRC emacs-lisp
     (use-package elpy
       :ensure t
       :config (elpy-enable))
   #+END_SRC

** Custom python-mode hook
   #+BEGIN_SRC emacs-lisp
     (defun my/python-mode-hook ()
       (add-to-list 'company-backends 'company-jedi))
     (add-hook 'python-mode-hook 'my/python-mode-hook)
   #+END_SRC

* Web
** textile-mode
   I recently switched to textile from markdown to write my blog posts. This emacs package is a major mode for writing textile markup.
   #+BEGIN_SRC emacs-lisp
     (use-package textile-mode
       :ensure t)
   #+END_SRC

** yaml-mode
   Major mode for =YAML= files.
   #+BEGIN_SRC emacs-lisp
     (use-package yaml-mode
       :ensure t)
   #+END_SRC

** PHP
*** php-mode
    Major mode for PHP.
    #+BEGIN_SRC emacs-lisp
      (use-package php-mode
        :ensure t)
      (add-hook 'php-mode-hook 'my-php-mode-hook)
      (defun my-php-mode-hook ()
        "My PHP mode configuration."
        (setq indent-tabs-mode nil)
        (setq tab-width 2)
        (setq c-basic-offset 2))
    #+END_SRC

** JavaScript
*** js2-mode
    JavaScript major mode.
    #+BEGIN_SRC emacs-lisp
      (use-package js2-mode
        :ensure t
        :config
        (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
        (setq js2-strict-missing-semi-warning nil))
      (add-hook 'js2-mode-hook (lambda () (setq js2-basic-offset 2)))
    #+END_SRC

*** indium
    JavaScript development environment.
    #+BEGIN_SRC emacs-lisp
      (use-package indium
        :ensure t)
    #+END_SRC

*** rjsx-mode
    Major-mode for React JSX files.
    #+BEGIN_SRC emacs-lisp
      (use-package rjsx-mode
        :ensure t
        :config
        (add-to-list 'auto-mode-alist '("components\\/.*\\.js\\'" . rjsx-mode))
        (add-to-list 'auto-mode-alist '("\\.jsx\\'" . rjsx-mode))
        (define-key js2-mode-map [C-x x] 'rjsx-mode)
        (add-hook 'rjsx-mode-hook 'emmet-mode))
    #+END_SRC

*** JSON mode
    Major-mode JSON files. =C-c C-f= to format.
    #+BEGIN_SRC emacs-lisp
      (use-package json-mode
        :ensure t
        :config
        (add-to-list 'auto-mode-alist '("\\.json\\'" . json-mode))
        (setq js-indent-level 2))
    #+END_SRC

*** add-node-modules-path
    Add local node_modules/.bin to exec-path. Use project-based installation of eg. eslint, prettier.
    #+BEGIN_SRC emacs-lisp
      (use-package add-node-modules-path
        :ensure t
        :config
        (add-hook 'js2-mode 'add-node-modules-path))
    #+END_SRC

*** prettier-emacs
    Prettier integration with emacs.
    #+BEGIN_SRC emacs-lisp
      (use-package prettier-js
        :ensure t
        :config
        (setq prettier-js-args '(
                                 "--no-semi" "true"
                                 ))
        (add-hook 'js2-mode-hook 'prettier-js-mode)
        ;; Bind a key
        (add-hook 'js2-mode-hook
                  '(lambda () (local-set-key "\C-c!f" 'prettier-js))))
    #+END_SRC

** web-mode
   Allows you to edit files that regular html-mode doesn't play nice with.
   #+BEGIN_SRC emacs-lisp
     (use-package web-mode
       :ensure t
       :config
       (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.ejs\\'" . web-mode))
       ;; (add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode)))
     (defun my-web-mode-hook ()
       "Hooks for Web mode."
       (setq web-mode-markup-indent-offset 2)
       (setq web-mode-css-indent-offset 2)
       (setq web-mode-code-indent-offset 2)
       (setq indent-tabs-mode t))
     (add-hook 'web-mode-hook  'my-web-mode-hook)
   #+END_SRC

** emmet-mode
   Write HTML faster.
   #+BEGIN_SRC emacs-lisp
     (use-package emmet-mode
       :ensure t
       :config (add-hook 'web-mode-hook (lambda () (emmet-mode 1))))
   #+END_SRC

** less-css-mode
   Major-mode for less files.
   #+BEGIN_SRC emacs-lisp
     (use-package less-css-mode
       :ensure t)
   #+END_SRC

** markdown-mode
   Major mode for markdown files.
   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode
       :ensure t)
   #+END_SRC

** pug-mode
   Major-mode for pug markup.
   #+BEGIN_SRC emacs-lisp
     (use-package pug-mode
       :ensure t)
   #+END_SRC

** restclient.el
   Test REST APIs from inside emacs.
   #+BEGIN_SRC emacs-lisp
     (use-package restclient
       :ensure t)
   #+END_SRC

** CSS Eldoc
   #+BEGIN_SRC emacs-lisp
     (use-package css-eldoc
       :ensure t
       :config
       (add-hook 'css-mode '(lambda ()
                              (eldoc-mode)
                              (css-eldoc-enable))))
   #+END_SRC

* Golang
** go-mode
   #+BEGIN_SRC emacs-lisp
     (use-package go-mode
       :ensure t)
   #+END_SRC

** company-go
   #+BEGIN_SRC emacs-lisp
     (use-package company-go
       :ensure t)
   #+END_SRC

** go-eldoc
   #+BEGIN_SRC emacs-lisp
     (use-package go-eldoc
       :ensure t
       :config
       (add-hook 'go-mode-hook 'go-eldoc-setup))
   #+END_SRC

** Get everything together
   #+BEGIN_SRC emacs-lisp
     (add-hook 'go-mode-hook
               (lambda ()
                 (setq indent-tabs-mode 1)
                 (setq tab-width 2)
                 ;; company mode setup
                 (company-mode)
                 (setq company-backends '(company-go))
                 ;; Customize compile command to run go build
                 (if (not (string-match "go" compile-command))
                     (set (make-local-variable 'compile-command)
                          "go build"))
                 ;; Go oracle
                 (load-file "$GOPATH/src/golang.org/x/tools/cmd/oracle/oracle.el")
                 ;; Go fmt before save
                 (setq gofmt-command "goimports")
                 (add-hook 'before-save-hook 'gofmt-before-save)))

     ;; Use spaces in all other modes
     (add-hook 'prog-mode-hook
               (lambda ()
                 (unless (derived-mode-p 'go-mode)
                   (setq indent-tabs-mode nil)
                   (setq tab-size 2))))
     (add-hook 'text-mode-hook
               (lambda ()
                 (setq indent-tabs-mode nil)
                 (setq tab-size 2)))
   #+END_SRC

* org-mode
** Get the latest =org-mode= version
   #+BEGIN_SRC emacs-lisp
     (use-package org
       :pin org
       :ensure t)
   #+END_SRC

** Prettify code blocks
   #+BEGIN_SRC emacs-lisp
     (setq org-src-fontify-natively t)
   #+END_SRC

** Get pretty unicode bullets in =org-mode=
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t
       :config
       (add-hook 'org-mode-hook 'org-bullets-mode))
   #+END_SRC

** =org-capture= stuff
*** Keybindings
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-c c") 'org-capture)
    #+END_SRC

*** Agenda files
    #+BEGIN_SRC emacs-lisp
      (setq org-agenda-files (list "~/code/scratchpad.org"))
    #+END_SRC

*** Templates
    #+BEGIN_SRC emacs-lisp
      (setq org-capture-templates
	    '(("n" "Note" entry (file+headline "~/life/scratchpad.org" "Note")
	       "* %?\n%T")
	      ("t" "Exun" entry (file+headline "~/life/scratchpad.org" "Exun")
	       "* %?\n%T" :prepend t)))
    #+END_SRC

** Display inline images
   #+BEGIN_SRC emacs-lisp
     (setq org-startup-with-inline-images 1)
   #+END_SRC

* TODOS
** [[https://github.com/abo-abo/org-download][org-download]]
** [[http://emacsworld.blogspot.in/2008/12/generating-automatic-file-headers.html][Automatic file headers]] [[https://emacs.stackexchange.com/questions/11005/how-change-the-contents-of-a-package-header2-el][here]]
** [[https://notmuchmail.org/notmuch-emacs/][notmuch]]
** [[https://github.crookster.org/switching-to-straight.el-from-emacs-26-builtin-package.el/][Switch to straight.el]]
